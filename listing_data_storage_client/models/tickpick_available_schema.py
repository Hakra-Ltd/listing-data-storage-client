# coding: utf-8

"""
    Listing Data Storage

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TickpickAvailableSchema(BaseModel):
    """
    TickpickAvailableSchema
    """ # noqa: E501
    place_id: StrictStr
    section: StrictStr
    row: StrictStr
    price: Optional[StrictStr]
    notes: Optional[StrictStr]
    inserted: datetime
    updated: Optional[datetime]
    quantity: Optional[Annotated[int, Field(strict=True, ge=0)]]
    subtotal_value: Optional[StrictStr]
    displayed_value: Optional[StrictStr]
    face_value: Optional[StrictStr]
    seat_from: Optional[StrictStr]
    seat_to: Optional[StrictStr]
    ticket_type: Optional[StrictStr]
    split_purchase_options: Optional[List[StrictInt]]
    __properties: ClassVar[List[str]] = ["place_id", "section", "row", "price", "notes", "inserted", "updated", "quantity", "subtotal_value", "displayed_value", "face_value", "seat_from", "seat_to", "ticket_type", "split_purchase_options"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TickpickAvailableSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if price (nullable) is None
        # and model_fields_set contains the field
        if self.price is None and "price" in self.model_fields_set:
            _dict['price'] = None

        # set to None if notes (nullable) is None
        # and model_fields_set contains the field
        if self.notes is None and "notes" in self.model_fields_set:
            _dict['notes'] = None

        # set to None if updated (nullable) is None
        # and model_fields_set contains the field
        if self.updated is None and "updated" in self.model_fields_set:
            _dict['updated'] = None

        # set to None if quantity (nullable) is None
        # and model_fields_set contains the field
        if self.quantity is None and "quantity" in self.model_fields_set:
            _dict['quantity'] = None

        # set to None if subtotal_value (nullable) is None
        # and model_fields_set contains the field
        if self.subtotal_value is None and "subtotal_value" in self.model_fields_set:
            _dict['subtotal_value'] = None

        # set to None if displayed_value (nullable) is None
        # and model_fields_set contains the field
        if self.displayed_value is None and "displayed_value" in self.model_fields_set:
            _dict['displayed_value'] = None

        # set to None if face_value (nullable) is None
        # and model_fields_set contains the field
        if self.face_value is None and "face_value" in self.model_fields_set:
            _dict['face_value'] = None

        # set to None if seat_from (nullable) is None
        # and model_fields_set contains the field
        if self.seat_from is None and "seat_from" in self.model_fields_set:
            _dict['seat_from'] = None

        # set to None if seat_to (nullable) is None
        # and model_fields_set contains the field
        if self.seat_to is None and "seat_to" in self.model_fields_set:
            _dict['seat_to'] = None

        # set to None if ticket_type (nullable) is None
        # and model_fields_set contains the field
        if self.ticket_type is None and "ticket_type" in self.model_fields_set:
            _dict['ticket_type'] = None

        # set to None if split_purchase_options (nullable) is None
        # and model_fields_set contains the field
        if self.split_purchase_options is None and "split_purchase_options" in self.model_fields_set:
            _dict['split_purchase_options'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TickpickAvailableSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "place_id": obj.get("place_id"),
            "section": obj.get("section"),
            "row": obj.get("row"),
            "price": obj.get("price"),
            "notes": obj.get("notes"),
            "inserted": obj.get("inserted"),
            "updated": obj.get("updated"),
            "quantity": obj.get("quantity"),
            "subtotal_value": obj.get("subtotal_value"),
            "displayed_value": obj.get("displayed_value"),
            "face_value": obj.get("face_value"),
            "seat_from": obj.get("seat_from"),
            "seat_to": obj.get("seat_to"),
            "ticket_type": obj.get("ticket_type"),
            "split_purchase_options": obj.get("split_purchase_options")
        })
        return _obj


