# coding: utf-8

"""
    Listing Data Storage

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from listing_data_storage_client.models.face_value import FaceValue
from listing_data_storage_client.models.price import Price
from listing_data_storage_client.models.stubhub_update_item_schema import StubhubUpdateItemSchema
from typing import Optional, Set
from typing_extensions import Self

class StubhubPriceStoreSchema(BaseModel):
    """
    StubhubPriceStoreSchema
    """ # noqa: E501
    place_id: StrictStr
    price: Price
    face_value: Optional[FaceValue]
    available_tickets: StrictInt
    available_quantities: List[StrictInt]
    ticket_class_name: StrictStr
    max_quantity: StrictInt
    update_items: Optional[List[StubhubUpdateItemSchema]] = None
    __properties: ClassVar[List[str]] = ["place_id", "price", "face_value", "available_tickets", "available_quantities", "ticket_class_name", "max_quantity", "update_items"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StubhubPriceStoreSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of price
        if self.price:
            _dict['price'] = self.price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of face_value
        if self.face_value:
            _dict['face_value'] = self.face_value.to_dict()
        # set to None if face_value (nullable) is None
        # and model_fields_set contains the field
        if self.face_value is None and "face_value" in self.model_fields_set:
            _dict['face_value'] = None

        # set to None if update_items (nullable) is None
        # and model_fields_set contains the field
        if self.update_items is None and "update_items" in self.model_fields_set:
            _dict['update_items'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StubhubPriceStoreSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "place_id": obj.get("place_id"),
            "price": Price.from_dict(obj["price"]) if obj.get("price") is not None else None,
            "face_value": FaceValue.from_dict(obj["face_value"]) if obj.get("face_value") is not None else None,
            "available_tickets": obj.get("available_tickets"),
            "available_quantities": obj.get("available_quantities"),
            "ticket_class_name": obj.get("ticket_class_name"),
            "max_quantity": obj.get("max_quantity"),
            "update_items": obj.get("update_items")
        })
        return _obj


