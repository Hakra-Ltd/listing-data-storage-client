# coding: utf-8

"""
    Listing Data Storage

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class StubhubStoreSchema(BaseModel):
    """
    StubhubStoreSchema
    """ # noqa: E501
    place_id: StrictStr
    section: StrictStr
    row: StrictStr
    seat: Optional[StrictStr]
    seat_from_internal: Optional[StrictStr]
    available_tickets: StrictInt
    available_quantities: List[StrictInt]
    ticket_class_name: StrictStr
    notes: StrictStr
    max_quantity: StrictInt
    price: Union[StrictFloat, StrictInt]
    face_value: Optional[Union[StrictFloat, StrictInt]]
    __properties: ClassVar[List[str]] = ["place_id", "section", "row", "seat", "seat_from_internal", "available_tickets", "available_quantities", "ticket_class_name", "notes", "max_quantity", "price", "face_value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of StubhubStoreSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if seat (nullable) is None
        # and model_fields_set contains the field
        if self.seat is None and "seat" in self.model_fields_set:
            _dict['seat'] = None

        # set to None if seat_from_internal (nullable) is None
        # and model_fields_set contains the field
        if self.seat_from_internal is None and "seat_from_internal" in self.model_fields_set:
            _dict['seat_from_internal'] = None

        # set to None if face_value (nullable) is None
        # and model_fields_set contains the field
        if self.face_value is None and "face_value" in self.model_fields_set:
            _dict['face_value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of StubhubStoreSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "place_id": obj.get("place_id"),
            "section": obj.get("section"),
            "row": obj.get("row"),
            "seat": obj.get("seat"),
            "seat_from_internal": obj.get("seat_from_internal"),
            "available_tickets": obj.get("available_tickets"),
            "available_quantities": obj.get("available_quantities"),
            "ticket_class_name": obj.get("ticket_class_name"),
            "notes": obj.get("notes"),
            "max_quantity": obj.get("max_quantity"),
            "price": obj.get("price"),
            "face_value": obj.get("face_value")
        })
        return _obj


