# coding: utf-8

"""
    Listing Data Storage

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TicketmasterAvailableDetailedWithUpdateSchema(BaseModel):
    """
    TicketmasterAvailableDetailedWithUpdateSchema
    """ # noqa: E501
    place_id: StrictStr
    full_section: Optional[StrictStr]
    section: StrictStr
    row: StrictStr
    row_rank: Optional[Annotated[int, Field(strict=True, ge=0)]]
    seat_number: Optional[StrictStr]
    attributes: List[StrictStr]
    offer_id: Optional[StrictStr]
    offer_name: Optional[StrictStr]
    sellable_quantities: Optional[List[StrictInt]]
    protected: Optional[StrictBool]
    description: List[StrictStr]
    inventory_type: Optional[StrictStr]
    list_price: Optional[StrictStr]
    total_price: Optional[StrictStr]
    inserted: datetime
    prev_updated: Optional[datetime] = None
    update_reason: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["place_id", "full_section", "section", "row", "row_rank", "seat_number", "attributes", "offer_id", "offer_name", "sellable_quantities", "protected", "description", "inventory_type", "list_price", "total_price", "inserted", "prev_updated", "update_reason"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TicketmasterAvailableDetailedWithUpdateSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if full_section (nullable) is None
        # and model_fields_set contains the field
        if self.full_section is None and "full_section" in self.model_fields_set:
            _dict['full_section'] = None

        # set to None if row_rank (nullable) is None
        # and model_fields_set contains the field
        if self.row_rank is None and "row_rank" in self.model_fields_set:
            _dict['row_rank'] = None

        # set to None if seat_number (nullable) is None
        # and model_fields_set contains the field
        if self.seat_number is None and "seat_number" in self.model_fields_set:
            _dict['seat_number'] = None

        # set to None if offer_id (nullable) is None
        # and model_fields_set contains the field
        if self.offer_id is None and "offer_id" in self.model_fields_set:
            _dict['offer_id'] = None

        # set to None if offer_name (nullable) is None
        # and model_fields_set contains the field
        if self.offer_name is None and "offer_name" in self.model_fields_set:
            _dict['offer_name'] = None

        # set to None if sellable_quantities (nullable) is None
        # and model_fields_set contains the field
        if self.sellable_quantities is None and "sellable_quantities" in self.model_fields_set:
            _dict['sellable_quantities'] = None

        # set to None if protected (nullable) is None
        # and model_fields_set contains the field
        if self.protected is None and "protected" in self.model_fields_set:
            _dict['protected'] = None

        # set to None if inventory_type (nullable) is None
        # and model_fields_set contains the field
        if self.inventory_type is None and "inventory_type" in self.model_fields_set:
            _dict['inventory_type'] = None

        # set to None if list_price (nullable) is None
        # and model_fields_set contains the field
        if self.list_price is None and "list_price" in self.model_fields_set:
            _dict['list_price'] = None

        # set to None if total_price (nullable) is None
        # and model_fields_set contains the field
        if self.total_price is None and "total_price" in self.model_fields_set:
            _dict['total_price'] = None

        # set to None if prev_updated (nullable) is None
        # and model_fields_set contains the field
        if self.prev_updated is None and "prev_updated" in self.model_fields_set:
            _dict['prev_updated'] = None

        # set to None if update_reason (nullable) is None
        # and model_fields_set contains the field
        if self.update_reason is None and "update_reason" in self.model_fields_set:
            _dict['update_reason'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TicketmasterAvailableDetailedWithUpdateSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "place_id": obj.get("place_id"),
            "full_section": obj.get("full_section"),
            "section": obj.get("section"),
            "row": obj.get("row"),
            "row_rank": obj.get("row_rank"),
            "seat_number": obj.get("seat_number"),
            "attributes": obj.get("attributes"),
            "offer_id": obj.get("offer_id"),
            "offer_name": obj.get("offer_name"),
            "sellable_quantities": obj.get("sellable_quantities"),
            "protected": obj.get("protected"),
            "description": obj.get("description"),
            "inventory_type": obj.get("inventory_type"),
            "list_price": obj.get("list_price"),
            "total_price": obj.get("total_price"),
            "inserted": obj.get("inserted"),
            "prev_updated": obj.get("prev_updated"),
            "update_reason": obj.get("update_reason")
        })
        return _obj


